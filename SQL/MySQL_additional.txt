## 1. GROUP BY, COUNT, SUM, AVG, MAX, MIN, DISTINCT, AS

    ###COUNT 함수
    - COUNT: 검색 결과의 row 수를 가져올 수 있는 SQL 문법
    - SQL 예제: SELECT COUNT(*) FROM items
    sql = SELECT COUNT(*) FROM items WHERE item_code = '\\\ + item_info['item_code'] ;.......
    cursor.execute(sql)
    result = cursor.fetchone()
    print (result[0])
   
      SELECT COUNT(*) FROM people (전체 row 수)
   
    - COUNT SQL 예제2:
      ```mysql
      SELECT COUNT(age) FROM people (ori_price field 값이 있는 row 수)
  
    #### SUM, AVG, MAX, MIN 함수
    * SUM(): 컬럼값의 합계
    * AVG(): 컬럼값의 평균
    * MAX(): 최대 컬럼값
    * MIN(): 최소 컬럼값
    * SQL 예제: 
      SELECT AVG(age) FROM people
    

    #### GROUP BY
    - GROUP BY: 그룹을 지어서, 데이터를 분석하고자 할 때 사용
    - COUNT, SUM, AVG, MAX, MIN 함수와 함께 사용하면 각 그룹별 row 수, 합계, 평균, 최대, 최소값등을 알 수 있음
    - SQL 예제: 
      SELECT AVG(age) FROM people GROUP BY gender
      -->gender별로 사람들의 평균 나이를 표시해라(남/녀 각각의 평균 나이를 구하라)
      SELECT provider.COUNT(*)FROM items GROUP BY provider
      -->판매처별로 각 판매처가 몇 개의 상품을 판매하는지(몇 개의 row에 해당되는지) 구하라


    #### DISTINCT
    - 특정 컬럼값 출력시 중복된 값을 출력하지 않음
    - SQL 예제: 
      SELECT DISTINCT gender FROM people
      SELECT DISCINCT provider FROM itmes; -->items 테이블에서 판매처들을 보여주되, 중복이면 생략(각 판매처별로 한 번씩만 보여지게 함)


    #### AS
    - 특정 결과값의 이름을 "변경"하는 방법
    - 예: COUNT(*) 를 total_count로 이름을 변경하기
      SELECT COUNT(*) AS total_count FROM people;
      ```
 
    #### 복합검색
    - WHERE, GROUP BY, ORDER BY등 다양한 SQL 문법을 복합적으로 사용하는 방법
    - WHERE절, GROUP BY절, ORDER BY절 순으로 작성
    - 예: 
      ```mysql
      SELECT provider, COUNT(dis_price) FROM items GROUP BY provider ORDER BY COUNT(dis_price) DESC;
      ```



## 2. GROUP BY와 HAVING
    - HAVING 절은 집계함수(count,sum,avg등의 함수)를 가지고 조건비교를 할 때 사용한다.
    - <<<<HAVING절은 GROUP BY절과 함께 사용>>>>
    - 예
    ```sql
    SELECT provider FROM items GROUP BY provider HAVING COUNT(*) >= 100;

    #### HAVING절을 포함한 복합 검색 
    ```mysql
    SELECT provider, COUNT(*) 
      FROM items  
     WHERE provider != '스마일배송'    -- 스마일배송은 제외
     GROUP BY provider              -- 판매처별로 그룹
    HAVING COUNT(*) > 100           -- 베스트상품이 100개 이상 등록된 경우만 검색
     ORDER BY COUNT(*) DESC;        -- 베스트상품 등록갯수 순으로 검색
    ```
    
    
    
## 3. JOIN 구문 익히기
    * JOIN은 두 개 이상의 테이블로부터 필요한 데이터를 연결해 하나의 포괄적인 구조로 결합시키는 연산
    * JOIN은 다음과 같이 세분화될 수 있지만, 보통은 **INNER JOIN**을 많이 사용함
      - INNER JOIN (일반적인 JOIN): 두 테이블에 해당 필드값이 매칭되는 (두 테이블의 모든 필드로 구성된) 레코드만 가져옴
      - OUTER JOIN (참고)
        - LEFT OUTER JOIN: 왼쪽 테이블에서 모든 레코드와 함께, 오른쪽 테이블에 왼쪽 테이블 레코드와 매칭되는 레코드를 붙여서 가져옴
        - RIGHT OUTER JOIN: 오른쪽 테이블에서 모든 레코드와 함께, 왼쪽 테이블에 왼쪽 테이블 레코드와 매칭되는 레코드를 붙여서 가져옴
  
    ### 3.1 JOIN (INNER JOIN)
    ->원하는 조건에 맞게 join되면 하나의 새로운 테이블이 만들어짐
    *즉, INNER JOIN은 조인하는 테이블의 ON 절의 조건이 일치하는 결과만 출력
    * 사용법: FROM 테이블1 INNER JOIN 테이블2 ON 테이블1과 테이블2의 매칭조건
    
    ```mysql
    SELECT * FROM items INNER JOIN ranking ON ranking.item_code = items.item_code WHERE ranking.main_category = \ALL\ 
    ```
    * 테이블 이름 다음에 한칸 띄고 새로운 이름을 쓰면, SQL구문 안에서 해당 이름으로 해당 테이블을 가리킬 수 있음 (AS 용법과 동일함)
      - 일반적으로 이와 같이 많이 사용됨
      - 아래는 그 예시
    ```mysql
    SELECT * FROM items a INNER JOIN ranking b ON a.item_code = b.item_code WHERE b.main_category = \ALL\ 
    ```

    연습1) 전체 베스트 상품(ALL 카테고리)에서 판매자별 베스트 상품 개수 출력해보기
           상품 개수 == row의 개수 == count(*)의 결과
    ==> SELECT items.provider.count(*) from ranking inner join items ON items.item_code=ranking.item_code
        WHERE ranking.main_category='ALL' GROUP BY items.provider
        ORDER BY count(*) DESC #내림차순
    ==> 즉, ranking과 items가 item_code가 일치하는 것에 한해서 join된 테이블에서, 아이템에서의 provider로 묶음.(provider라는 필드 값은 items 테이블에만 있음)
        그리고 거기서 랭킹에서의 메인 카테고리가 all인 것에 한정해서 item의 필드 값인 provider의 row 개수를 출력
        (provider라는 필드 값이 items에만 있으므로 provider.count(*)가 아니라! items.provider.count(*) 이런 식으로 표현해줌)

  연습2) 메인 카테고리가 패션의류인 서브 카테고리 포함, 패션의류 전체 베스트 상품에서 판매자별 베스트 상품 갯수가 5이상인 판매자와 베스트 상품갯수 출력해보기
  (단계적으로, 점진적으로 아래에 쓰겠음)
        1. 랭킹 테이블에서 메인카테고리가 패션의류인 레코드들을 뽑음 
        SELECT * FROM ranking WHERE ranking.main_category="패션의류";

        2. 이 때 랭킹테이블은 item테이블과 join된(연동된) 상태여야 함
        SELECT * FROM ranking INNER JOIN items ON items.item_code=ranking.item_code WHERE ranking.main_category="패션의류"

        3. JOIN된 테이블에서 provider가(provider필드는 item테이블꺼이므로 items.provider라고 씀) 몇 개 있는지 count 
        --->GROUP BY를 통해 PROVIDER끼리 묶은 후!!!!!
        SELECT items.provider.COUNT(*) FROM FROM ranking INNER JOIN items ON items.item_code=ranking.item_code 
        WHERE ranking.main_category="패션의류" GROUP BY items.provider;

        4. 5개 이상 - COUNT라는 집계함수가 있으므로 GROUP BY에 HAVING으로 조건 달아줌
       ---> GROUP BY items.provider HAVING COUNT(*)>5;: 5개 이상의 레코드들을 가진 PROVIDER들을 기준으로 표를 묶음
        SELECT items.provider.COUNT(*) FROM FROM ranking INNER JOIN items ON items.item_code=ranking.item_code 
        WHERE ranking.main_category="패션의류" GROUP BY items.provider HAVING COUNT(*)>5;

        5.최종
        SELECT items.provider.COUNT(*) FROM FROM ranking INNER JOIN items ON items.item_code=ranking.item_code 
        WHERE ranking.main_category="패션의류" GROUP BY items.provider HAVING COUNT(*)>5;


  
    ### 3.2 OUTER JOIN (참고)
    * OUTER JOIN은 조인하는 테이블의 ON 절의 조건 중 ""한쪽의 데이터를 모두"" 가져옴
    * OUTER JOIN은 LEFT OUTER JOIN, RIGHT OUTER JOIN 이 있음
   
    #### 3.2.1 LEFT OUTER JOIN
    - 예: 
      ```
      SELECT * FROM customer_table C LEFT OUTER JOIN order_table O ON C.customer_id = O.customer_id
      ```

  
    #### 3.2.2 RIGHT OUTER JOIN
    - 예: 
      ```mysql
      SELECT * FROM customer_table C RIGHT OUTER JOIN order_table O ON C.customer_id = O.customer_id
      ```
  
  
    ## 4. 서브 쿼리 (MySQL SubQuery)
    * SQL문 안에 포함되어 있는 SQL문
      - SQL문 안에서 <<<괄호() 를 사용해서, 서브쿼리문을 추가할 수 있음>>>
    * 테이블과 테이블간의 검색시, <<<검색 범위(테이블 중 필요한 부분만 먼저 가져오도록)를 좁히는 기능에 주로 사용>>>
  
    ### 4.1. 서브쿼리(Sub Query) 사용법
    * JOIN은 출력 결과에 여러 테이블의 열이 필요한 경우 유용
    * 대부분의 서브쿼리(Sub Query) 는 <JOIN 문으로 처리가 가능>
   
    #### 예1: 서브카테코리가 '여성신발'인 상품 타이틀만 가져오기
    - JOIN SQL을 사용해서 작성하는 방법
    ```mysql
        SELECT title
        FROM items
        INNER JOIN ranking ON items.item_code = ranking.item_code
        WHERE ranking.sub_category = '여성신발'
    ```
    - **서브쿼리를 사용해서 작성하는 방법**
      - 컬럼값 IN 서브쿼리 출력값 -> 컬럼값과 서브쿼리값이 같을 때 
    ---> 즉! items 에서 title을 가져오되, IN조건인 sub_category는 여성신발이고, 랭킹 테이블에 있는 아이템코드에도! 해당되는 
         아이템에서 가져와라
    ---> 즉!!! title을 items 테이블에서 가져오되, IN 조건에 반드시 해당되도록 where조건도 만족시키도록함
         (where 조건이 더 큰 범위의 집합이고, IN 조건은 그보다 더 자세한(부분집합), 
          즉 여기서 where인 item_code가 더 작은 집합/자세한 조건인 IN 구문에도 해당되는 것으로 가지고 옴!! )

    ```mysql
        SELECT title 
        FROM items
        WHERE item_code IN
            (SELECT item_code FROM ranking WHERE sub_category = '여성신발')
    ```
  
    #### 예2: 서브카테코리가 '여성신발'인 상품중 할인가격이 가장 높은 상품의 할인가격 가져오기
    - JOIN SQL을 사용해서 작성하는 방법
    ```mysql
        SELECT MAX(items.dis_price)
        FROM items
        INNER JOIN ranking ON items.item_code = ranking.item_code
        WHERE ranking.sub_category = '여성신발'
    ```
    - **서브쿼리를 사용해서 작성하는 방법**
    ```mysql
        SELECT MAX(dis_price) 
        FROM items 
        WHERE item_code IN 
        (SELECT item_code FROM ranking WHERE sub_category = '여성신발')
    ```
  
    ##### 참고: 다양한 서브 쿼리 삽입 위치
    - 비교
    ```mysql
        SELECT category_id, COUNT(*) AS film_count FROM film_category
        WHERE film_category.category_id >
            (SELECT category.category_id FROM category WHERE category.name = 'Comedy')
        GROUP BY film_category.category_id
    ```
    
    - FROM 절
    ```mysql
        SELECT
        a, b, c
        FROM
        (SELECT * FROM  atoz_table)
    ```
  
    연습1)
    메인 카테고리별로 할인 가격이 10만원 이상인 상품이 몇개 있는지를 출력해보기
      SELECT main_category.COUNT(*) FROM ranking 
      WHERE item_code IN (SELECT item_code FROM items WHERE dis_price>10000)
      GROUP BY main_category

    --->일단 main_category별로 묶고(main_cateogry를 중심으로 테이블을 정리하고,
    SELECT main_category.COUNT(*) FROM ranking로 main_category별 record 개수를 뽑아냄 )
    
    연습2)
    메인 카테고리, 서브 카테고리에 대해, 평균할인가격과 평균할인율을 출력해보기 (다양한 SQL 문법 활용)
    SELECT ranking.main_category, ranking.sub_category, AVG(items.dis_price), AVG(items.dis_percent) FROM items
    INNER JOIN ranking ON items.item_code=ranking.item_code
    GROUP BY ranking.main_category,ranking.sub_category
    
  
    
  
  
